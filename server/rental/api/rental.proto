syntax = "proto3";

package rental.v1;

option go_package = "coolcar/rental/api/gen/v1;rentalpb";

/**
我们知道DDD中，Aggregate和面向对象的Class是不同的。虽然也讲究高内聚，但是Aggregate对粒度有苛刻的要求。
一个Aggregate是一个事务一致性的边界。
鉴定方法如下：
如果一部分属性自身会随着时间改变，或者变化时这个属性集可以完全被替换，那么这些属性需要单独放到一个Value Object中，而不是放在Entity中。
这样，Aggregate就包含了根entity和Value对象，Aggregate本身不是不变体，因为值对象经常被替换。但是Entity是不变体.
trip是一个entity，只认id aggregate root
entity的数据是可以改变的，但是不会因为改变了其他的值就说不再是这个entity了，因为entity只认root id，而不管是否具体的其他值变不变
就算其他值都一样，但是id不同，那也是两个entity类型，其他值都不一样，但是root id相同，那么也说是属于同一个entity


为什么LocationStatus是一个valueObject 而Trip却是Entity，并不是字段多就是Entity，比如最后将Trip内的Id标识拿出来，放入到
TripEntity中，这样下来就会看出，并不是字段多就Entity
*/
//value object vs entity
//举例:value object
//a = 3 b = 3 ,两个变量，占据两个内存空间，我们认为a=b

//a = 3 a = 4,a的值改变了

//Location是value object
//loc1 = (31,121)
//loc2 = (31,121)
//以上就是value object
message Location {
    double latitude  =  1;
    double longitude = 2;
}

message LocationStatus{
    Location location = 1;
    int32 fee_cent = 2;//应该是服务器计算的，不应该是填写的
    double  km_driven = 3;//应该是服务器计算的，不应该是填写的
    string  poi_name = 4;
    int64 timestamp_sec = 5;
}

enum  TripStatus {
    TS_NOT_SPECIFIED = 0;
    IN_PROGRESS = 1;
    FINISHED = 2;
}

//如此定义，trip里的id就放到这里
//那么 Trip 就不再是实体，而是值类型，而此时的TripEntity
//则是属于实体
message TripEntity{
    string  id = 1;
    Trip trip = 2;
}

//值类型
message Trip {
    //string id = 7;//涉及到领域驱动开发关键知识点，value object vs entity
    string accountId = 1;
    string carId = 2;
    LocationStatus start = 3;
    LocationStatus current = 5;//应该是服务器计算的，不应该是填写的
    LocationStatus end = 4;
    TripStatus status = 6;//应该是服务器计算的，不应该是填写的
    string identity_id = 7;
}


message CreateTripRequest{
    //string start = 1;
//    Trip trip = 1;
    //如果Trip里边放有id，而不是定义TripEntity，那么在CreateTrip
    //的时候，其他的值要填写，那么这时候的Trip里的id要不要填
    //没办法决定，所以id不能在这里，id交给服务器
    Location start = 1;//创建行程需要知道其实点和那辆车
    string  car_id = 2;
    string  avatar_url = 3;

}

//message CreateTripResponse{
//    TripEntity trip = 1;
//    string trip_id = 1;
//}

message GetTripRequest{
    string  id = 1;
}

message GetTripsRequest{
    TripStatus status = 1;
}

message GetTripsResponse {
    repeated TripEntity trips = 1;
}

message UpdateTripRequest {
    string id = 1;
    Location current = 2;
    bool end_trip = 3;
}

service TripService{
    //rpc CreateTrip(CreateTripRequest) returns(CreateTripResponse);
    rpc CreateTrip(CreateTripRequest) returns(TripEntity);
    rpc GetTrip(GetTripRequest) returns (Trip);
    rpc GetTrips(GetTripsRequest) returns (GetTripsResponse);
    rpc UpdateTrip (UpdateTripRequest) returns (Trip);
}





// Profile Service

enum Gender{
    G_NOT_SPECIFIED = 0;
    MALE = 1;
    FEMALE = 2;
}

enum IdentityStatus {
    UNSUBMITTED = 0;
    PENDING = 1;
    VERIFIED = 2;
}

message Profile {

    //string id = 2;//??身份信息是属于一个实体，还是属于值类型，没办法通过id来得出结论，profile 的 id 不是原因而是结果，值类型是account_id->identity的映射，并不一定是id与实体的对应关系
    //通过返回值进一步推测，值类型返回的是有profile，只不过是空结构体，而实体如果没有被找到是需要报错的，因为实体有生命周期.


    Identity identity = 1;
    IdentityStatus identity_status = 2;
    //photo addr
}

//值类型，只需下面四个字段
message Identity{
    string lic_number = 1;
    string name  = 2;
    Gender gender = 3;
    int64  birth_date_millis = 4;
}

message GetProfileRequest {

}

message ClearProfileRequest{

}


message GetProfilePhotoRequest{

}
message GetProfilePhotoResponse{
    string url = 1;
}

message CreateProfilePhotoRequest {

}

message CreateProfilePhotoResponse{
    string upload_url = 1;
}

message CompleteProfilePhotoRequest {

}
//message CompleteProfilePhotoResponse{
//    Identity identity = 1;
//}

message ClearProfilePhotoRequest {

}

message ClearProfilePhotoResponse {

}


message UploadFilePhotoRequest {
    string file_name = 1;
}

message UploadFilePhotoResponse {
    string url=1;
}

service ProfileService{
    rpc GetProfile(GetProfileRequest) returns (Profile);
    rpc SubmitProfile(Identity) returns (Profile);
    rpc ClearProfile(ClearProfileRequest) returns (Profile);



    rpc GetProfilePhoto(GetProfilePhotoRequest) returns (GetProfilePhotoResponse);
    rpc CreateProfilePhoto(CreateProfilePhotoRequest) returns (CreateProfilePhotoResponse);
    rpc CompleteProfilePhoto(CompleteProfilePhotoRequest) returns (Identity);
    rpc ClearProfilePhoto (ClearProfilePhotoRequest) returns (ClearProfilePhotoResponse);


    rpc UploadFilePhoto(UploadFilePhotoRequest) returns (UploadFilePhotoResponse);
}



























